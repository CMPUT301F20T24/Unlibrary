@startuml
'------------------- Views  -------------------------------
class LibraryFragment {
-LibraryViewModel mViewModel
-FragmentLibraryBinding mBinding
-FilterMap mUpdateFilter

+void onCreate(@Nullable Bundle savedInstanceState)
+View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class UnlibraryFragment {
-UnlibraryViewModel mViewModel
-FragmentUnlibraryBinding mBinding
-FilterMap mUpdateFilter

+void onCreate(@Nullable Bundle savedInstanceState)
+View onCreateView(LayoutInflater inflater, ViewGroup container,
                          Bundle savedInstanceState)
}

class ExchangeFragment {
-ExchangeViewModel mViewModel
-FragmentExchangeBinding mBinding

void onCreate(@Nullable Bundle savedInstanceState)
View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}


'------------------- Model Classes + Firestore -------------------------------
class Book {
+enum Status
-String mId
-String mIsbn
-String mTitle
-String mAuthor
-String mOwner
-String mPhoto
-Status mStatus
+Book()
+Book(String isbn, String title, String author, String owner, String photo)
+String getId()
+void setId(String id)
+String getAuthor()
+void setAuthor(String author)
+String getPhoto()
+void setPhoto(String photo)
+Status getStatus()
+void setStatus(Status status)
+String getIsbn()
+void setIsbn(String isbn)
+String getOwner()
+void setOwner(String owner)
+String getTitle()
+void setTitle(String title)
}

class Request {
+enum State
-String mId
-String mRequester
-String mBook
-State mState
-Pair<Double, Double> mLocation
+Request()
+Request(String requester, String book)
+String getId()
+void setId(String id)
+String getRequester()
+String getBook()
+State getState()
+void setState(State state)
+Pair<Double, Double> getLocation()
+void setLocation(Pair<Double, Double> location)
}

Book ..o LibraryRepository
Book ..o UnlibraryRepository
Book ..o ExchangeRepository

Request ..o ExchangeRepository
Request ..o UnlibraryRepository

'------------------- ViewModel and Repositories  -------------------------------
class ExchangeViewModel{
-String TAG
-LiveData<List<Book>> mBooks;
-ExchangeRepository mExchangeRepository;
-MutableLiveData<Book> mCurrentBook
-LiveData<Request> mCurrentRequest
-LiveData<User> mCurrentBookOwner;
-SingleLiveEvent<NavDirections> mNavigationEvent
-SingleLiveEvent<String> mFailureMsgEvent
-SingleLiveEvent<String> mSuccessRequestMsgEvent
-String mSearchText;

+ExchangeViewModel()
+SingleLiveEvent<String> getFailureMsgEvent()
+SingleLiveEvent<NavDirections> getNavigationEvent()
+SingleLiveEvent<String> getSuccessRequestMsgEvent()
+LiveData<List<Book>> getBooks()
+LiveData<Book> getCurrentBook()
+void sendRequest()
+void selectCurrentBook(View view, int position)
#void onCleared()
+String getSearchText()
+void setSearchText(String searchText)
+void search(String keywords)
+void fetchOwnerForCurrentBook()
+LiveData<User> getCurrentBookOwner()
+LiveData<Boolean> showRequestButton()
}

class ExchangeRepository{
-String REQUEST_COLLECTION
-String BOOK_COLLECTION
-String USER_COLLECTION 
-String OWNER
-String STATUS
-String TAG
-String ALGOLIA_INDEX_NAME = "books";
-String ALGOLIA_ID_FIELD = "objectID";
-String previousSearch;
-FirebaseFirestore mDb;
-Client mAlgoliaClient;
-List<Book.Status> mAllowedStatus;
-MutableLiveData<List<Book>> mBooks;
-MutableLiveData<User> mCurrentBookOwner;
-MutableLiveData<Request> mCurrentRequest;
-ListenerRegistration mListenerRegistration;
-String mUID;

+ExchangeRepository()
+String getUid()
+void attachListener()
+void createRequest(Request request, OnSuccessListener<DocumentReference> onSuccessListener, OnFailureListener onFailureListener)
+LiveData<List<Book>> getBooks()
+void detachListener()
+void search(String keywords)
+LiveData<User> getOwner()
+void fetchOwnerForCurrentBook(String currentBookOwnerID)
+LiveData<Request> getCurrentRequest()
+void fetchCurrentRequest(Book book)
+void sendRequest(Request request, Book book, OnSuccessListener<Void> onSuccessListener, OnFailureListener onFailureListener)
}


class LibraryViewModel {
+enum InputKey
-String TAG
-int MAX_TITLE_LENGTH
-int MAX_AUTHOR_LENGTH
-int ISBN_LENGTH
-String BOOK_PHOTO_STORE
-MutableLiveData<Book> mCurrentBook
-MutableLiveData<Uri> mTakenPhoto
-MutableLiveData<Boolean> mIsLoading
-SingleLiveEvent<String> mFailureMsgEvent
-SingleLiveEvent<Pair<InputKey, String>> mInvalidInputEvent
-SingleLiveEvent<NavDirections> mNavigationEvent
-FilterMap mFilter
-LiveData<List<Book>> mBooks
-LibraryRepository mLibraryRepository
-MutableLiveData<List<User>> mCurrentBookRequesters
-User mSelectedRequester;
-MutableLiveData<LatLng> mHandoffLocation
+String TITLE
+String ACCEPT_REQUEST_TEMPLATE

+LibraryViewModel()
+MutableLiveData<Book> getCurrentBook()
+LiveData<Uri> getTakenPhoto()
+LiveData<Boolean> getIsLoading()
+LiveData<Boolean> showHandoffButton()
+LiveData<Boolean> showHandoffLocation()
+SingleLiveEvent<NavDirections> getNavigationEvent()
+SingleLiveEvent<String> getFailureMsgEvent()
+SingleLiveEvent<Pair<InputKey, String>> getInvalidInputEvent()
+LiveData<List<Book>> getBooks()
+LiveData<List<User>> getRequesters()
+User getSelectedRequester()
+LiveData<LatLng> getHandoffLocation()
#void onCleared()
+void createBook()
+FilterMap getFilter()
+void setFilter(FilterMap filter)
+void filter()?
+void saveBook()
+void selectCurrentBook(View v, int position)
+void editCurrentBook()
+void deleteCurrentBook()
+void onFinishedScanSuccess(String tag, String isbn)
+void handoff(String isbn)
+void takePhoto(Uri uri)
+void onFinishedScanFailure(Throwable e)
+void scanAutoFill(String isbn)
+Boolean showBookPhotoDeleteButton()
-void validateTitle(String title)
-void validateAuthor(String author)
-void validateIsbn(String isbn)
#void detachRequestersListener()
+void selectRequester(View v, int position)
+void initMapsFragment()
+void declineSelectedRequester()
+void acceptSelectedRequester(LatLng latLng, SendNotificationInterface notification)
+void updateHandoffLocation(LatLng latLng)
+void fetchHandoffLocation()
}

class LibraryRepository {
-String ISBN_FETCH_TAG
-String BOOKS_COLLECTION
-String REQUESTS_COLLECTION
-String USERS_COLLECTION
-String IS_READY_FOR_HANDOFF
-String BOOK_FIELD
-String STATUS_FIELD
-String STATE_FIELD
-String OWNER_FIELD
-String TAG
-String ALGOLIA_INDEX_NAME
-String REQUESTER
-String LOCATION
-String ALGOLIA_TITLE_FIELD
-String ALGOLIA_AUTHOR_FIELD
-String ALGOLIA_ID_FIELD
-Client mAlgoliaClient
-FirebaseFirestore mDb
-FirebaseAuth mAuth
-ListenerRegistration mBookListenerRegistration
-ListenerRegistration mBooksListenerRegistration
-ListenerRegistration mRequestsListenerRegistration
-MutableLiveData<List<Book>> mBooks
-FilterMap mFilter

+LibraryRepository()
+void attachListener()
+void createBook(Book book, OnSuccessListener<DocumentReference> onSuccessListener, OnFailureListener onFailureListener)
+void updateBook(Book book, OnSuccessListener<? super Void> onSuccessListener, OnFailureListener onFailureListener)
+void deleteBook(Book book, OnSuccessListener<? super Void> onSuccessListener, OnFailureListener onFailureListener)
+void fetchBookDataFromIsbn(String isbn, JSONObjectRequestListener listener)
+void detachListener()
+LiveData<List<Book>> getBooks()
+void setFilter(FilterMap filter)
+void addAlgoliaIndex(Book book)
+void addBookRequestersListener(String bookId, OnSuccessListener<List<User>> listener)
+void addBookListener(String bookId, OnSuccessListener<Book> listener)
+void detachRequestersListener()
+void getBorrowedRequest(Book book, OnSuccessListener<? super QuerySnapshot> onSuccessListener, OnFailureListener onFailureListener)
+void completeExchange(Request request, Book book, OnSuccessListener<Void> onSuccessListener, OnFailureListener onFailureListener)
+void declineRequester(String requestedUID, String bookRequestedID, OnSuccessListener<? super Void> onDeclineSuccess, OnFailureListener onDeclineFailure, Runnable onRequestNotFoundInDB)
+void acceptRequester(String requestedUID, String bookRequestedID, LatLng handoffLocation, OnSuccessListener onSuccessListener, OnFailureListener onFailureListener)
+void updateHandoffLocation(String requestedUID, String bookRequestedID, LatLng handoffLocation, OnSuccessListener onSuccessListener, OnFailureListener onFailureListener)
+void fetchHandoffLocation(String requestedUID, String bookRequestedID, OnFinishedHandoffLocationListener onFinished, OnFailureListener onFailureListener)
}

class UnlibraryRepository {
-String TAG
-String BOOKS_COLLECTION
-String REQUESTS_COLLECTION
-String USERS_COLLECTION
-String IS_READY_FOR_HANDOFF
-String BOOK
-String STATUS
-String STATE
-String REQUESTER
-FirebaseFirestore mDb
-MutableLiveData<List<Book>> mBooks
-List<Book> mAllBooks;
-ListenerRegistration mListenerRegistration
-String mUID;
-FilterMap mFilter;

+UnlibraryRepository(FirebaseFirestore db)
+void attachListeners()
+void setFilter(FilterMap filter)
+void filter()
+void getRequest(Book book, OnFinishedListener onFinished, OnErrorListener onErrorListener)
+void completeExchange(Request request, Book book, OnSuccessListener<Void> onSuccessListener, OnFailureListener onFailureListener)
+void updateBook(Book book, OnSuccessListener<? super Void> onSuccessListener, OnFailureListener onFailureListener)
+MutableLiveData<List<Book>> getBooks()
+void detachListeners()
+void updateBook(Book book, OnSuccessListener<? super Void> onSuccessListener, OnFailureListener onFailureListener)
+void fetchHandoffLocation(String bookRequestedID, LibraryRepository.OnFinishedHandoffLocationListener onFinished, OnFailureListener onFailureListener)
}

class UnlibraryViewModel {
-String TAG
-LiveData<List<Book>> mBooks
-UnlibraryRepository mUnlibraryRepository
-MutableLiveData<Book> mCurrentBook
-MutableLiveData<User> mCurrentBookOwner
-MutableLiveData<Request> mCurrentRequest
-SingleLiveEvent<NavDirections> mNavigationEvent
-SingleLiveEvent<String> mFailureMsgEvent
-SingleLiveEvent<String> mSuccessMsgEvent
-MutableLiveData<LatLng> mHandoffLocation

+UnlibraryViewModel(UnlibraryRepository unlibraryRepository)
+FilterMap getFilter()
+void setFilter(FilterMap filter)
+SingleLiveEvent<String> getFailureMsgEvent()
+SingleLiveEvent<NavDirections> getNavigationEvent()
+SingleLiveEvent<String> getSuccessMsgEvent()
+LiveData<Boolean> showHandoffButton()
+LiveData<Boolean> showHandoffLocation()
+LiveData<LatLng> getHandoffLocation()
+void fetchHandoffLocation()
+LiveData<Book> getCurrentBook()
+LiveData<List<Book>> getBooks()
+void handoff(String isbn)
+MutableLiveData<User> getCurrentBookOwner()
#void onCleared()
+void selectCurrentBook(View view, int position)
+void onFinishedScanSuccess(String tag, String isbn)
+void onFinishedScanFailure(String tag, Throwable e)
}

package Firestore {}

LibraryRepository <.. LibraryViewModel: <<uses>>
UnlibraryRepository <.. UnlibraryViewModel: <<uses>>
ExchangeRepository <.. ExchangeViewModel: <<uses>>

LibraryViewModel <.. LibraryFragment: <<uses>>
UnlibraryViewModel <.. UnlibraryFragment: <<uses>>
ExchangeViewModel <.. ExchangeFragment: <<uses>>

Firestore <.. LibraryRepository: <<uses>>
Firestore <.. UnlibraryRepository: <<uses>>
Firestore <.. ExchangeRepository: <<uses>>


'------------------- BookFragment, BooksRecyclerViewAdapter -------------------------------
class BooksFragment {
-BooksSource mBooksSource
-BooksRecyclerViewAdapter.OnItemClickListener mOnItemClickListener
-FragmentBookListBinding mBinding

+BooksFragment()
+void setBooksSource(BooksSource booksSource)
+void setOnItemClickListener(BooksRecyclerViewAdapter.OnItemClickListener onItemClickListener)
+View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class BooksRecyclerViewAdapter {
#List<Book> mBooks
-OnItemClickListener mOnItemClickListener

+BooksRecyclerViewAdapter(List<Book> books, OnItemClickListener onItemCLickListener)
+void setData(List<Book> books)
+BookViewHolder onCreateViewHolder(ViewGroup parent, int viewType)
+void onBindViewHolder(final BookViewHolder holder, int position)
+int getItemCount()
}

class BookViewHolder {
-FragmentBookCardBinding mBinding;

+BookViewHolder(FragmentBookCardBinding binding)
+void bind(Book book)
+void onClick(View v)
}

interface BooksSource {
LiveData<List<Book>> getBooks()
}

LibraryFragment *.. BooksFragment
UnlibraryFragment *.. BooksFragment
ExchangeFragment *.. BooksFragment

BooksSource <|.. ExchangeViewModel: <<implements>>
BooksSource <|.. LibraryViewModel: <<implements>>
BooksSource <|.. UnlibraryViewModel: <<implements>>
BooksSource ..o BooksFragment

BooksRecyclerViewAdapter *.. BookViewHolder
BooksFragment *.. BooksRecyclerViewAdapter
@enduml
