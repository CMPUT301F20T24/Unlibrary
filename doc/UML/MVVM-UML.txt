@startuml
'------------------- Views  -------------------------------
class LibraryFragment {
-LibraryViewModel mViewModel
-FragmentLibraryBinding mBinding
-FilterMap mUpdateFilter

+void onCreate(@Nullable Bundle savedInstanceState)
+View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class UnlibraryFragment {
-UnlibraryViewModel mViewModel
-FragmentUnlibraryBinding mBinding

+void onCreate(@Nullable Bundle savedInstanceState) 
+View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState)
}

class ExchangeFragment {
-ExchangeViewModel mViewModel
-FragmentExchangeBinding mBinding

void onCreate(@Nullable Bundle savedInstanceState)
View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}



'------------------- Model Classes + Firestore -------------------------------
class Book {
-int id
-string title
-string author
-string isbn
-string status
-Image photo
-User owner
+void setId(int id)
+void setTitle(string title)
+void setAuthor (string author)
+void setIsbn (string isbn)
+void setStatus(string status)
+void setPhoto(Image photo)
+void setOwner (User owner)
+int getId ()
+string getTitle ()
+string getAuthor ()
+string getIsbn ()
+string getStatus ()
+Image getPhoto ()
+User getOwner ()
}

class Request {
+enum State
-String mId
-String mRequester
-String mBook
-State mState
-Pair<Double, Double> mLocation
+Request()
+Request(String requester, String book)
+String getId()
+void setId(String id)
+String getRequester()
+String getBook()
+State getState()
+void setState(State state)
+Pair<Double, Double> getLocation()
+void setLocation(Pair<Double, Double> location)
}

Book ..o LibraryRepository
Book ..o UnlibraryRepository
Book ..o ExchangeRepository

Request ..o ExchangeRepository


'------------------- ViewModel and Repositories  -------------------------------
class ExchangeViewModel{
-String TAG
-LiveData<List<Book>> mBooks;
-ExchangeRepository mExchangeRepository;
-MutableLiveData<Book> mCurrentBook
-SingleLiveEvent<NavDirections> mNavigationEvent
-SingleLiveEvent<String> mFailureMsgEvent
+ExchangeViewModel()
+SingleLiveEvent<String> getFailureMsgEvent()
+SingleLiveEvent<NavDirections> getNavigationEvent()
+LiveData<List<Book>> getBooks()
+LiveData<Book> getCurrentBook()
+void sendRequest()
+void selectCurrentBook(View view, int position)
#void onCleared()
}

class ExchangeRepository{
-String REQUEST_COLLECTION
-String BOOK_COLLECTION
-String OWNER
-String STATUS
-String TAG
-FirebaseFirestore mDb
-MutableLiveData<List<Book>> mBooks
-ListenerRegistration mListenerRegistration
-String mUID
+ExchangeRepository()
+String getUid()
+void attachListener()
+void createRequest(Request request, OnSuccessListener<DocumentReference> onSuccessListener, OnFailureListener onFailureListener)
+LiveData<List<Book>> getBooks()
+void detachListener()
}


class LibraryViewModel {
-LibraryRepository libraryRepository
+LibraryViewModel(LibraryRepository libraryRepository)
+ void setTitle(String newTitle)
+ void setDescription(String newDescription)
+ void setISBN(String newISBN)
+ void takePictures()
+ void sendApproval()
+ void sendDecline()
+ initiateBorrowHandoff(Book book)
+ completeReturnHandoff(Book book)
}

class LibraryRepository {
-FirebaseFirestore  LibraryRepository
-LiveData<ArrayList<Book>> booksData
+LiveData<ArrayList<Book>> getStoreLibraryData()
+LiveData<ArrayList<Book>> getLibraryData()
+void updateLibrary(Book book)
}

class UnlibraryRepository {
-FirebaseFirestore  UnlibraryRepository
-LiveData<ArrayList<Book>> booksData
+LiveData<ArrayList<Book>> getStoreUnlibraryData()
+LiveData<ArrayList<Book>> getUnlibraryData()
+void updateUnlibrary(Book book)
}

class UnlibraryViewModel {
-UnlibraryRepository UnlibraryRepository
+UnlibraryViewModel(UnlibraryRepository UnlibraryRepository)
+void deleteBook(Book toDelete)
+completeBorrowHandoff(Book book)
+initiateReturnHandoff(Book book)
}

package Firestore {}

LibraryRepository <.. LibraryViewModel: <<uses>>
UnlibraryRepository <.. UnlibraryViewModel: <<uses>>
ExchangeRepository <.. ExchangeViewModel: <<uses>>

LibraryViewModel <.. LibraryFragment: <<uses>>
UnlibraryViewModel <.. UnlibraryFragment: <<uses>>
ExchangeViewModel <.. ExchangeFragment: <<uses>>

Firestore <.. LibraryRepository: <<uses>>
Firestore <.. UnlibraryRepository: <<uses>>
Firestore <.. ExchangeRepository: <<uses>>


'------------------- BookFragment, BooksRecyclerViewAdapter -------------------------------
class BooksFragment {
-BooksSource mBooksSource
-BooksRecyclerViewAdapter.OnItemClickListener mOnItemClickListener
-FragmentBookListBinding mBinding

+BooksFragment()
+void setBooksSource(BooksSource booksSource)
+void setOnItemClickListener(BooksRecyclerViewAdapter.OnItemClickListener onItemClickListener)
+View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class BooksRecyclerViewAdapter {
#List<Book> mBooks
-OnItemClickListener mOnItemClickListener

+BooksRecyclerViewAdapter(List<Book> books, OnItemClickListener onItemCLickListener)
+void setData(List<Book> books)
+BookViewHolder onCreateViewHolder(ViewGroup parent, int viewType)
+void onBindViewHolder(final BookViewHolder holder, int position)
+int getItemCount()
}

class BookViewHolder {
-FragmentBookCardBinding mBinding;

+BookViewHolder(FragmentBookCardBinding binding)
+void bind(Book book)
+void onClick(View v)
}

interface BooksSource {
LiveData<List<Book>> getBooks()
}

LibraryFragment *.. BooksFragment
UnlibraryFragment *.. BooksFragment
ExchangeFragment *.. BooksFragment

BooksSource <|.. ExchangeViewModel: <<implements>>
BooksSource <|.. LibraryViewModel: <<implements>>
BooksSource <|.. UnlibraryViewModel: <<implements>>
BooksSource ..o BooksFragment

BooksRecyclerViewAdapter *.. BookViewHolder
BooksFragment o.. BooksRecyclerViewAdapter
@enduml
