@startuml
'------------------- Fragments -------------------------------
class LibraryFragment {
-LibraryViewModel mViewModel
-FragmentLibraryBinding mBinding
-FilterMap mUpdateFilter

+void onCreate(@Nullable Bundle savedInstanceState)
+View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class UnlibraryFragment {
-UnlibraryViewModel mViewModel
-FragmentUnlibraryBinding mBinding

+void onCreate(@Nullable Bundle savedInstanceState)
+View onCreateView(LayoutInflater inflater, ViewGroup container,
                          Bundle savedInstanceState)
}

class ExchangeFragment {
-ExchangeViewModel mViewModel
-FragmentExchangeBinding mBinding

void onCreate(@Nullable Bundle savedInstanceState)
View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class ExchangeBookDetailsFragment {
-FragmentExchangeBookDetailsBinding mBinding

+View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class LibraryBookDetailsFragment {
-FragmentLibraryBookDetailsBinding mBinding;
+View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class LibraryEditBookFragment {
-LibraryViewModel mViewModel;
-FragmentLibraryEditBookBinding mBinding;
-Uri mAutofillUri;
-Uri mTakePhotoUri;
-ActivityResultLauncher<Uri> mScanBarcodeContract;
-ActivityResultLauncher<Uri> mTakePhotoContract;

+View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
-void showToast(String msg)
}

LibraryFragment <..> LibraryBookDetailsFragment: <<navigates to>>
LibraryBookDetailsFragment <..> LibraryEditBookFragment: <<navigates to>>

ExchangeFragment <..> ExchangeBookDetailsFragment: <<navigates to>>
UnlibraryFragment <..> UnlibraryBookDetailsFragment: <<navigates to>>

'------------------- ViewModel and Repositories  -------------------------------
class ExchangeViewModel{
-String TAG
-LiveData<List<Book>> mBooks;
-ExchangeRepository mExchangeRepository;
-MutableLiveData<Book> mCurrentBook
-SingleLiveEvent<NavDirections> mNavigationEvent
-SingleLiveEvent<String> mFailureMsgEvent
+ExchangeViewModel()
+SingleLiveEvent<String> getFailureMsgEvent()
+SingleLiveEvent<NavDirections> getNavigationEvent()
+LiveData<List<Book>> getBooks()
+LiveData<Book> getCurrentBook()
+void sendRequest()
+void selectCurrentBook(View view, int position)
#void onCleared()
}

class ExchangeRepository{
-String REQUEST_COLLECTION
-String BOOK_COLLECTION
-String OWNER
-String STATUS
-String TAG
-FirebaseFirestore mDb
-MutableLiveData<List<Book>> mBooks
-ListenerRegistration mListenerRegistration
-String mUID
+ExchangeRepository()
+String getUid()
+void attachListener()
+void createRequest(Request request, OnSuccessListener<DocumentReference> onSuccessListener, OnFailureListener onFailureListener)
+LiveData<List<Book>> getBooks()
+void detachListener()
}


class LibraryViewModel {
-LibraryRepository libraryRepository
+LibraryViewModel(LibraryRepository libraryRepository)
+ void setTitle(String newTitle)
+ void setDescription(String newDescription)
+ void setISBN(String newISBN)
+ void takePictures()
+ void sendApproval()
+ void sendDecline()
+ initiateBorrowHandoff(Book book)
+ completeReturnHandoff(Book book)
}

class LibraryRepository {
-FirebaseFirestore  LibraryRepository
-LiveData<ArrayList<Book>> booksData
+LiveData<ArrayList<Book>> getStoreLibraryData()
+LiveData<ArrayList<Book>> getLibraryData()
+void updateLibrary(Book book)
}

class UnlibraryRepository {
-FirebaseFirestore  UnlibraryRepository
-LiveData<ArrayList<Book>> booksData
+LiveData<ArrayList<Book>> getStoreUnlibraryData()
+LiveData<ArrayList<Book>> getUnlibraryData()
+void updateUnlibrary(Book book)
}

class UnlibraryViewModel {
-UnlibraryRepository UnlibraryRepository
+UnlibraryViewModel(UnlibraryRepository UnlibraryRepository)
+void deleteBook(Book toDelete)
+completeBorrowHandoff(Book book)
+initiateReturnHandoff(Book book)
}

class FilterMap {
-Map<Book.Status, Boolean> mFilter

+FilterMap()
+void set(String status, Boolean enable)
+Map<Book.Status, Boolean> getMap()
+void setMap(Map<Book.Status, Boolean> map)
+String[] itemStrings()
+boolean[] itemBooleans()
}

LibraryRepository <.. LibraryViewModel: <<uses>>
UnlibraryRepository <.. UnlibraryViewModel: <<uses>>
ExchangeRepository <.. ExchangeViewModel: <<uses>>

LibraryViewModel <.. LibraryFragment: <<uses>>
UnlibraryViewModel <.. UnlibraryFragment: <<uses>>
ExchangeViewModel <.. ExchangeFragment: <<uses>>

FilterMap <.. LibraryViewModel: <<uses>>
FilterMap <.. LibraryRepository: <<uses>>

'LibraryBookDetailsFragment ..> LibraryViewModel: <<uses>>
'LibraryEditBookFragment ..> LibraryViewModel: <<uses>>
'ExchangeBookDetailsFragment ..> ExchangeViewModel: <<uses>>
'UnlibraryBookDetailsFragment ..> UnlibraryViewModel: <<uses>>

LibraryViewModel <.. LibraryBookDetailsFragment: <<uses>>
LibraryViewModel <.. LibraryEditBookFragment: <<uses>>
ExchangeViewModel <.. ExchangeBookDetailsFragment: <<uses>>
UnlibraryViewModel <.. UnlibraryBookDetailsFragment: <<uses>>
@enduml
