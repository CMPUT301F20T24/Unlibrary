@startuml
'------------------- Fragments -------------------------------
class LibraryFragment {
-LibraryViewModel mViewModel
-FragmentLibraryBinding mBinding
-FilterMap mUpdateFilter

+void onCreate(@Nullable Bundle savedInstanceState)
+View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class UnlibraryFragment {
-UnlibraryViewModel mViewModel
-FragmentUnlibraryBinding mBinding
-FilterMap mUpdateFilter

+void onCreate(@Nullable Bundle savedInstanceState)
+View onCreateView(LayoutInflater inflater, ViewGroup container,
                          Bundle savedInstanceState)
}

class ExchangeFragment {
-ExchangeViewModel mViewModel
-FragmentExchangeBinding mBinding

void onCreate(@Nullable Bundle savedInstanceState)
View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class ExchangeBookDetailsFragment {
-FragmentExchangeBookDetailsBinding mBinding
-PushNotificationSender mSender

+View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class LibraryBookDetailsFragment {
-FragmentLibraryBookDetailsBinding mBinding
-LibraryViewModel mViewModel
-Uri mHandoffIsbnUri
-ActivityResultLauncher<Uri> mScanBarcodeContract

+View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
+void onDestroyView()
+void showToast(String msg)
+void onMapReady(GoogleMap googleMap)
+void onResume()
+void onPause()
}

class UnlibraryBookDetailsFragment {
-FragmentUnlibraryBookDetailsBinding mBinding
-UnlibraryViewModel mViewModel
-Uri mHandoffIsbnUri
-ActivityResultLauncher<Uri> mScanBarcodeContract

+View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
+void onMapReady(GoogleMap googleMap)
+void onResume()
+void onPause()
}

class LibraryEditBookFragment {
-LibraryViewModel mViewModel;
-FragmentLibraryEditBookBinding mBinding;
-Uri mAutofillUri;
-Uri mTakePhotoUri;
-ActivityResultLauncher<Uri> mScanBarcodeContract;
-ActivityResultLauncher<Uri> mTakePhotoContract;

+View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
-void showToast(String msg)
}

LibraryFragment <..> LibraryBookDetailsFragment: <<navigates to>>
LibraryBookDetailsFragment <..> LibraryEditBookFragment: <<navigates to>>

ExchangeFragment <..> ExchangeBookDetailsFragment: <<navigates to>>
UnlibraryFragment <..> UnlibraryBookDetailsFragment: <<navigates to>>

'------------------- ViewModel and Repositories  -------------------------------
class ExchangeViewModel{
-String TAG
-LiveData<List<Book>> mBooks;
-ExchangeRepository mExchangeRepository;
-MutableLiveData<Book> mCurrentBook
-LiveData<Request> mCurrentRequest
-LiveData<User> mCurrentBookOwner;
-SingleLiveEvent<NavDirections> mNavigationEvent
-SingleLiveEvent<String> mFailureMsgEvent
-SingleLiveEvent<String> mSuccessRequestMsgEvent
-String mSearchText;

+ExchangeViewModel()
+SingleLiveEvent<String> getFailureMsgEvent()
+SingleLiveEvent<NavDirections> getNavigationEvent()
+SingleLiveEvent<String> getSuccessRequestMsgEvent()
+LiveData<List<Book>> getBooks()
+LiveData<Book> getCurrentBook()
+void sendRequest()
+void selectCurrentBook(View view, int position)
#void onCleared()
+String getSearchText()
+void setSearchText(String searchText)
+void search(String keywords)
+void fetchOwnerForCurrentBook()
+LiveData<User> getCurrentBookOwner()
+LiveData<Boolean> showRequestButton()
}

class ExchangeRepository{
-String REQUEST_COLLECTION
-String BOOK_COLLECTION
-String USER_COLLECTION 
-String OWNER
-String STATUS
-String TAG
-String ALGOLIA_INDEX_NAME = "books";
-String ALGOLIA_ID_FIELD = "objectID";
-String previousSearch;
-FirebaseFirestore mDb;
-Client mAlgoliaClient;
-List<Book.Status> mAllowedStatus;
-MutableLiveData<List<Book>> mBooks;
-MutableLiveData<User> mCurrentBookOwner;
-MutableLiveData<Request> mCurrentRequest;
-ListenerRegistration mListenerRegistration;
-String mUID;

+ExchangeRepository()
+String getUid()
+void attachListener()
+void createRequest(Request request, OnSuccessListener<DocumentReference> onSuccessListener, OnFailureListener onFailureListener)
+LiveData<List<Book>> getBooks()
+void detachListener()
+void search(String keywords)
+LiveData<User> getOwner()
+void fetchOwnerForCurrentBook(String currentBookOwnerID)
+LiveData<Request> getCurrentRequest()
+void fetchCurrentRequest(Book book)
+void sendRequest(Request request, Book book, OnSuccessListener<Void> onSuccessListener, OnFailureListener onFailureListener)
}


class LibraryViewModel {
+enum InputKey
-String TAG
-int MAX_TITLE_LENGTH
-int MAX_AUTHOR_LENGTH
-int ISBN_LENGTH
-String BOOK_PHOTO_STORE
-MutableLiveData<Book> mCurrentBook
-MutableLiveData<Uri> mTakenPhoto
-MutableLiveData<Boolean> mIsLoading
-SingleLiveEvent<String> mFailureMsgEvent
-SingleLiveEvent<Pair<InputKey, String>> mInvalidInputEvent
-SingleLiveEvent<NavDirections> mNavigationEvent
-FilterMap mFilter
-LiveData<List<Book>> mBooks
-LibraryRepository mLibraryRepository
-MutableLiveData<List<User>> mCurrentBookRequesters
-User mSelectedRequester;
-MutableLiveData<LatLng> mHandoffLocation
+String TITLE
+String ACCEPT_REQUEST_TEMPLATE

+LibraryViewModel()
+MutableLiveData<Book> getCurrentBook()
+LiveData<Uri> getTakenPhoto()
+LiveData<Boolean> getIsLoading()
+LiveData<Boolean> showHandoffButton()
+LiveData<Boolean> showHandoffLocation()
+SingleLiveEvent<NavDirections> getNavigationEvent()
+SingleLiveEvent<String> getFailureMsgEvent()
+SingleLiveEvent<Pair<InputKey, String>> getInvalidInputEvent()
+LiveData<List<Book>> getBooks()
+LiveData<List<User>> getRequesters()
+User getSelectedRequester()
+LiveData<LatLng> getHandoffLocation()
#void onCleared()
+void createBook()
+FilterMap getFilter()
+void setFilter(FilterMap filter)
+void filter()?
+void saveBook()
+void selectCurrentBook(View v, int position)
+void editCurrentBook()
+void deleteCurrentBook()
+void onFinishedScanSuccess(String tag, String isbn)
+void handoff(String isbn)
+void takePhoto(Uri uri)
+void onFinishedScanFailure(Throwable e)
+void scanAutoFill(String isbn)
+Boolean showBookPhotoDeleteButton()
-void validateTitle(String title)
-void validateAuthor(String author)
-void validateIsbn(String isbn)
#void detachRequestersListener()
+void selectRequester(View v, int position)
+void initMapsFragment()
+void declineSelectedRequester()
+void acceptSelectedRequester(LatLng latLng, SendNotificationInterface notification)
+void updateHandoffLocation(LatLng latLng)
+void fetchHandoffLocation()
}

class LibraryRepository {
-String ISBN_FETCH_TAG
-String BOOKS_COLLECTION
-String REQUESTS_COLLECTION
-String USERS_COLLECTION
-String IS_READY_FOR_HANDOFF
-String BOOK_FIELD
-String STATUS_FIELD
-String STATE_FIELD
-String OWNER_FIELD
-String TAG
-String ALGOLIA_INDEX_NAME
-String REQUESTER
-String LOCATION
-String ALGOLIA_TITLE_FIELD
-String ALGOLIA_AUTHOR_FIELD
-String ALGOLIA_ID_FIELD
-Client mAlgoliaClient
-FirebaseFirestore mDb
-FirebaseAuth mAuth
-ListenerRegistration mBookListenerRegistration
-ListenerRegistration mBooksListenerRegistration
-ListenerRegistration mRequestsListenerRegistration
-MutableLiveData<List<Book>> mBooks
-FilterMap mFilter

+LibraryRepository()
+void attachListener()
+void createBook(Book book, OnSuccessListener<DocumentReference> onSuccessListener, OnFailureListener onFailureListener)
+void updateBook(Book book, OnSuccessListener<? super Void> onSuccessListener, OnFailureListener onFailureListener)
+void deleteBook(Book book, OnSuccessListener<? super Void> onSuccessListener, OnFailureListener onFailureListener)
+void fetchBookDataFromIsbn(String isbn, JSONObjectRequestListener listener)
+void detachListener()
+LiveData<List<Book>> getBooks()
+void setFilter(FilterMap filter)
+void addAlgoliaIndex(Book book)
+void addBookRequestersListener(String bookId, OnSuccessListener<List<User>> listener)
+void addBookListener(String bookId, OnSuccessListener<Book> listener)
+void detachRequestersListener()
+void getBorrowedRequest(Book book, OnSuccessListener<? super QuerySnapshot> onSuccessListener, OnFailureListener onFailureListener)
+void completeExchange(Request request, Book book, OnSuccessListener<Void> onSuccessListener, OnFailureListener onFailureListener)
+void declineRequester(String requestedUID, String bookRequestedID, OnSuccessListener<? super Void> onDeclineSuccess, OnFailureListener onDeclineFailure, Runnable onRequestNotFoundInDB)
+void acceptRequester(String requestedUID, String bookRequestedID, LatLng handoffLocation, OnSuccessListener onSuccessListener, OnFailureListener onFailureListener)
+void updateHandoffLocation(String requestedUID, String bookRequestedID, LatLng handoffLocation, OnSuccessListener onSuccessListener, OnFailureListener onFailureListener)
+void fetchHandoffLocation(String requestedUID, String bookRequestedID, OnFinishedHandoffLocationListener onFinished, OnFailureListener onFailureListener)
}

class UnlibraryRepository {
-String TAG
-String BOOKS_COLLECTION
-String REQUESTS_COLLECTION
-String USERS_COLLECTION
-String IS_READY_FOR_HANDOFF
-String BOOK
-String STATUS
-String STATE
-String REQUESTER
-FirebaseFirestore mDb
-MutableLiveData<List<Book>> mBooks
-List<Book> mAllBooks;
-ListenerRegistration mListenerRegistration
-String mUID;
-FilterMap mFilter;

+UnlibraryRepository(FirebaseFirestore db)
+void attachListeners()
+void setFilter(FilterMap filter)
+void filter()
+void getRequest(Book book, OnFinishedListener onFinished, OnErrorListener onErrorListener)
+void completeExchange(Request request, Book book, OnSuccessListener<Void> onSuccessListener, OnFailureListener onFailureListener)
+void updateBook(Book book, OnSuccessListener<? super Void> onSuccessListener, OnFailureListener onFailureListener)
+MutableLiveData<List<Book>> getBooks()
+void detachListeners()
+void updateBook(Book book, OnSuccessListener<? super Void> onSuccessListener, OnFailureListener onFailureListener)
+void fetchHandoffLocation(String bookRequestedID, LibraryRepository.OnFinishedHandoffLocationListener onFinished, OnFailureListener onFailureListener)
}

class UnlibraryViewModel {
-String TAG
-LiveData<List<Book>> mBooks
-UnlibraryRepository mUnlibraryRepository
-MutableLiveData<Book> mCurrentBook
-MutableLiveData<User> mCurrentBookOwner
-MutableLiveData<Request> mCurrentRequest
-SingleLiveEvent<NavDirections> mNavigationEvent
-SingleLiveEvent<String> mFailureMsgEvent
-SingleLiveEvent<String> mSuccessMsgEvent
-MutableLiveData<LatLng> mHandoffLocation

+UnlibraryViewModel(UnlibraryRepository unlibraryRepository)
+FilterMap getFilter()
+void setFilter(FilterMap filter)
+SingleLiveEvent<String> getFailureMsgEvent()
+SingleLiveEvent<NavDirections> getNavigationEvent()
+SingleLiveEvent<String> getSuccessMsgEvent()
+LiveData<Boolean> showHandoffButton()
+LiveData<Boolean> showHandoffLocation()
+LiveData<LatLng> getHandoffLocation()
+void fetchHandoffLocation()
+LiveData<Book> getCurrentBook()
+LiveData<List<Book>> getBooks()
+void handoff(String isbn)
+MutableLiveData<User> getCurrentBookOwner()
#void onCleared()
+void selectCurrentBook(View view, int position)
+void onFinishedScanSuccess(String tag, String isbn)
+void onFinishedScanFailure(String tag, Throwable e)
}

class FilterMap {
-Map<Book.Status, Boolean> mFilter

+FilterMap(boolean avail)
+void set(String status, Boolean enable)
+Map<Book.Status, Boolean> getMap()
+void setMap(Map<Book.Status, Boolean> map)
+String[] itemStrings()
+boolean[] itemBooleans()
}

class BookDetailFragment {
-Animator currentAnimator
-int shortAnimationDuration

+void onCreate(Bundle savedInstanceState)
#void zoomImageFromThumb(final FrameLayout frame, final ImageButton thumbView, final ImageView fullImageView)
}

class LibraryMapsFragment{
-String TAG
-Float ZOOM_LEVEL
-GoogleMap mMap
-FragmentMapsBinding mBinding
-LibraryViewModel mViewModel
-LatLng mLatLng
-PushNotificationSender mSender
+void onMapReady(GoogleMap googleMap)
+View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState)
+void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState)
}

class LibraryRequesterProfileFragment{
-FragmentLibraryRequesterProfileBinding mBinding
-LibraryViewModel mViewModel
+View onCreateView(@NotNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
}

class RequestersRecyclerViewAdapter{
#List<User> mRequesters
-RequestersRecyclerViewAdapter.OnItemClickListener mOnItemClickListener

+RequestersRecyclerViewAdapter(List<User> requesters, RequestersRecyclerViewAdapter.OnItemClickListener onItemClickListener)
+void setData(List<User> newRequesters)
+RequestersRecyclerViewAdapter.RequesterViewHolder onCreateViewHolder(ViewGroup parent, int viewType)
+void onBindViewHolder(final RequestersRecyclerViewAdapter.RequesterViewHolder holder, int position)
+int getItemCount()
}

class RequesterViewHolder{
-FragmentLibraryRequesterItemBinding mBinding

+RequesterViewHolder(FragmentLibraryRequesterItemBinding binding)
+void bind(User requester)	
}

class UnlibraryMapsFragment{
-Float ZOOM_LEVEL
-GoogleMap mMap
-FragmentMapsBinding mBinding
-UnlibraryViewModel mViewModel

+void onMapReady(GoogleMap googleMap)
+View onCreateView(@NonNull LayoutInflater inflater,
                             @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState)
+void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState)
}

RequesterViewHolder <|-- RequestersRecyclerViewAdapter: <<extends>>
RequestersRecyclerViewAdapter <.. LibraryBookDetailsFragment: <<uses>>

LibraryRepository <.. LibraryViewModel: <<uses>>
UnlibraryRepository <.. UnlibraryViewModel: <<uses>>
ExchangeRepository <.. ExchangeViewModel: <<uses>>

LibraryViewModel <.. LibraryFragment: <<uses>>
UnlibraryViewModel <.. UnlibraryFragment: <<uses>>
ExchangeViewModel <.. ExchangeFragment: <<uses>>

FilterMap <.. LibraryViewModel: <<uses>>
FilterMap <.. LibraryRepository: <<uses>>

BookDetailFragment <|-- LibraryBookDetailsFragment: <<extends>>
BookDetailFragment <|-- ExchangeBookDetailsFragment: <<extends>>
BookDetailFragment <|-- UnlibraryBookDetailsFragment: <<extends>>

LibraryMapsFragment <.. LibraryBookDetailsFragment: <<uses>>
UnlibraryMapsFragment <.. UnlibraryBookDetailsFragment: <<uses>>

LibraryRequesterProfileFragment <.. LibraryBookDetailsFragment: <<uses>>

LibraryViewModel <.. LibraryBookDetailsFragment: <<uses>>
LibraryViewModel <.. LibraryEditBookFragment: <<uses>>
ExchangeViewModel <.. ExchangeBookDetailsFragment: <<uses>>
UnlibraryViewModel <.. UnlibraryBookDetailsFragment: <<uses>>


'------------------- Utils -------------------------------
class BarcodeScanner{
+void scanBarcode(Context context, Uri uri, String tag, OnFinishedScanListener onFinished)
}

class FailedToScan{
+FailedToScan(String msg)
}

class CustomImageBinding{
+void loadImage(ImageView imageView, String path, Uri uri)
}

class AlgoliaClientModule{
+Client provideAlgoliaClient()
}

class FirebaseAuthModule{
+FirebaseAuth provideFirebaseAuth()
}

class FirebaseFirestoreModule{
+FirebaseFirestore provideFirebaseFirestore()	
}

class PushNotificationSender{
-String TAG
-String FCM_API
-String SERVER_KEY
-String CONTENT_TYPE
-String TOPIC
+void generateNotification(View view, String target, String title, String body)
+void sendNotification(JSONObject notification, View view)
}

class PushNotificationService{
-String ADMIN_CHANNEL_ID
+void onMessageReceived(RemoteMessage remoteMessage)
}

interface SendNotificationInterface{
+void send(String target, String title, String body)
	
}

class SingleLiveEvent<T>{
-String TAG
-AtomicBoolean pending

+void observe(@NonNull final LifecycleOwner owner, @NonNull final Observer<? super T> observer)
+void setValue(@Nullable final T t)
+void call()
}

class SingletonQueue{
-SingletonQueue mInstance
-RequestQueue mRequestQueue
-Context mCtx

+SingletonQueue(Context context)
+SingletonQueue getInstance(Context context)
+RequestQueue getRequestQueue()
+void addToRequestQueue(Request<T> req)
}

class MainApplication{
}

ExchangeBookDetailsFragment ..> PushNotificationSender: <<uses>>

MainApplication ..> AlgoliaClientModule: <<uses>>
MainApplication ..> FirebaseAuthModule: <<uses>>
MainApplication ..> FirebaseFirestoreModule: <<uses>>

ExchangeBookDetailsFragment ..> SendNotificationInterface: <<uses>>
LibraryMapsFragment ..> SendNotificationInterface: <<uses>>
ExchangeViewModel ..> SendNotificationInterface: <<uses>>
ExchangeBookDetailsFragment ..> SendNotificationInterface: <<uses>>
LibraryViewModel ..> SendNotificationInterface: <<uses>>

PushNotificationSender ..> SingletonQueue: <<uses>>

AuthViewModel ..> SingleLiveEvent<T>: <<uses>>
ExchangeViewModel ..> SingleLiveEvent<T>: <<uses>>
LibraryViewModel ..> SingleLiveEvent<T>: <<uses>>
UnlibraryViewModel ..> SingleLiveEvent<T>: <<uses>>

LibraryEditBookFragment ..> BarcodeScanner: <<uses>>
LibraryEditBookFragment ..> FailedToScan: <<uses>>
LibraryEditBookFragment ..> CustomImageBinding: <<uses>>
LibraryBookDetailsFragment ..> CustomImageBinding: <<uses>>
@enduml
